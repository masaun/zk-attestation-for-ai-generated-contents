//! A simple program that takes a number `n` as input, and writes the `n-1`th and `n`th fibonacci
//! number as an output.

// These two lines are necessary for the program to properly compile.
//
// Under the hood, we wrap your main function with some extra code so that it behaves properly
// inside the zkVM.
#![no_main]
sp1_zkvm::entrypoint!(main);

//use alloy_sol_types::SolType;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
struct ImageData {
    id: u32,
    height: u32,
    width: u32,
    image_name: String,
    image_extension: String,
}

pub fn main() {
    // @dev - Store an output image data, which is generated by AI.
    let image_data: ImageData = sp1_zkvm::io::read::<ImageData>();
    // let _id: u32 = sp1_zkvm::io::read::<u32>();
    // let _height: u32 = sp1_zkvm::io::read::<u32>();
    // let _width: u32 = sp1_zkvm::io::read::<u32>();
    // let _image_name: String = sp1_zkvm::io::read::<String>();
    // let _image_extension: String = sp1_zkvm::io::read::<String>();

    // <h3>HTML canvas ImageData data property</h3>
    // <canvas id="myCanvas"
    //         width="200"
    //         height="200"
    //         style="border:2px solid;">
    // </canvas>

    println!("Image ID: {}", image_data.id);
    println!("Image Height: {}", image_data.height);
    println!("Image Width: {}", image_data.width);
    println!("Image Name: {}", image_data.image_name);
    println!("Image Extension: {}", image_data.image_extension);

    // Write the result (true or false) to the output.
    sp1_zkvm::io::commit(&image_data);
}
